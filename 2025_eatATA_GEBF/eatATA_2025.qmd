---
title: "eatATA - Automated Test Assembly"
author: "Benjamin Becker"
date: "2025-01-29"
title-slide-attributes:
  data-background-image: eatATA.png
  data-background-size: 15%
  data-background-repeat: no-repeat
  data-background-position: 95% 5%
bibliography: references_dissertation.bib
csl: apa.csl
format: 
  revealjs:
    logo: eatATA.png
    footer: "Automatisierte Testformerstellung"
    toc: false
    theme: default
    css: logo.css
editor: source
execute:
  echo: true
---


## Automatisierte Testformerstellung

```{R}
#| echo: false
#| eval: true
library(eatATA)

```

**Testformerstellung**

- Itempool
- Testspezifikationen
- Zuordnung von Items zu Testformen

**Automatisiert**

- Nicht händisch
- Unter Verwendung von Optimierungsalgorithmen


## Automatisierte Testformerstellung


![](Graphs/flower_assembly.PNG)


# Wofür?


## Anwendungsfelder 

Kompetenztests

- (parallele) Testform(en) aus Itempool

Fragebögen

- Skalen aus Itempool
- Fragebogenrotationen



## Parallele Testformen: Wieso? {.smaller}


-   **Low-stakes Assessments**\
    → Breite inhaltliche Abdeckung\
    → Messgenauigkeit auf Gruppenebene

-   **High-stakes Assessments**\
    → Abschreiben/Betrugsversuche verhindern\
    → Weitergabe Testinhalte verhindern

-   **Pilotierungen**\
    → Testung großer Itemzahlen


## Testspezifikationen {.smaller}

**Hinsichtlich?**

-   Inhaltliche Bereiche
-   Aufgabenformate
-   Schwierigkeit/Testinformation
-   Zeitaufwand/Speededness
-   ...

**zusätzlich**

-   Itemunverträglichkeiten

# Mathematical Programming

## Definition

**Synonyme**

-   Mathematical Optimization/Mathematical Programming

**Relevante Subklasse**

-   Mixed Integer (Linear) Programming (MIP/MILP)

**Grundidee:**

Maximierungs- oder Minimierungsproblem, wobei Lösungsraum durch (Ung-)Gleichungen eingeschränkt werden kann

## Zentrale Konzepte

**Branch and Bound Algorithmen**

-   Grundidee: Probieren aller möglichen Lösungen ("Brute Forcing")
-   Effiziente Reduktion des Lösungsraumes
-   Kombinieren von Constraints

## Anwendungsgebiete


![](Graphs/mp_applications.PNG)





# Automatisierte Testformerstellung

## Automatisierte Testformerstellung

```{r}
#| echo: false
knitr::include_graphics("Graphs/vanderLinden_cover.JPG")
```

## Automatisierte Testformerstellung

Verwendet Konzepte der Mathematical Optimization (Mixed Integer Programming) zur Blockbesetzung [@vanderLinden.2005; @Kuhn.2015]

**Zentrale Konzepte**

-   Decision Variables (0/1, Item x Testform)
-   Constraints (Testspezifikationen)
-   Objective Function (wichtigste relative Testspezifikation)

## Minimalbeispiel: Item Pool

-   30 Items
-   Item Formate (MC, offen, Zuordnung)
-   Durchschnittliche Antwortzeiten
-   Schwierigkeitsparameter (1PL-Modell)

## Minimalbeispiel: Item Pool

```{r}
#| echo: false
# LaTeX table generated using xtable package in R.
library(knitr)
kable(items_mini[1:5, ],
      caption = "Erste fünf Items des simulierten Itempools.")
```

## Minimalbeispiel: Spezifikationen

**Spezifikationen**

-   1 Testform
-   Minimale durchschnittliche Bearbeitungszeit
-   Exakt 10 Items in Testform
-   4 MC-Items, 3 offene Items, 3 Zuordnungsitems

## Minimalbeispiel: Decision Variables {.smaller}

**Decision Variables**

-   Matrix mit
    -   Spalten = Anzahl Items (+ 1)
    -   Zeilen = Anzahl Testformen
-   30 Items, 1 Testform $$
      i_{1, b1}, i_{2, b1}, i_{3, b1}, \ldots, i_{30, b1}
    $$

## Minimalbeispiel: Objective Function {.smaller}

**Objective Function**

-   'Relative Testspezifikation'
-   so viel/wenig/nah wie möglich (an) ...
-   Wichtig: Exakt eine Testspezifikation muss hierfür ausgewählt werden
-   Min/Max/Minimax/Maximin
-   Minimale Testzeit $$
    minimiere \quad  27.79i_{1, b1} + 15.45i_{2, b1} + \ldots + 19.50i_{30, b1} 
    $$

## Minimalbeispiel: Constraints {.smaller}

**Constraints**

-   Alle anderen Testspezifikationen
-   Genau 10 Items pro Testform $$
    i_{1, b1} + i_{2, b1} + \ldots + i_{30, b1} = 10 
    $$
-   4 MC Items, 3 offene Items, 3 Zuordnungsitems $$
      1i_{1, b1} + 1i_{2, b1} + \ldots + 0i_{30, b1} = 4 
    $$ $$
      0i_{1, b1} + 0i_{2, b1} + \ldots + 0i_{30, b1} = 3 
    $$ $$
      0i_{1, b1} + 0i_{2, b1} + \ldots + 1i_{30, b1} = 3 
    $$


# Umsetzung in eatATA


## eatATA: Resources I

Paket verfügbar auf [CRAN](https://CRAN.R-project.org/package=eatATA)

![](Graphs/eatATA_cran.JPG)

## eatATA: Resources II

Vignetten und Übersicht Funktionalität auf [pkgdown](https://beckerbenj.github.io/eatATA/)

![](Graphs/eatATA_pkgdown.JPG)

## eatATA: Resources III

eatATA Tutorial Paper [@eatATA]

![](Graphs/psych_paper.PNG)

## Code: Objective Function

Minimiere durchschnittliche Blockzeit

```{r}
Btime <- minObjective(
	nForms = 1, 
	itemValues = items_mini$time,
	itemIDs = items_mini$item
)
```

## Code: Constraint 1

Anzahl Items im Block

```{r}
Blength <- itemsPerFormConstraint(
	nForms = 1, 
	operator = "=",
	targetValue = 10,
	itemIDs = items_mini$item
)
```

## Code: Constraint 2

Itemformate

```{r}
Bcat <- itemCategoryConstraint(
  nForms = 1, 
  as.factor(items_mini$format),
  targetValues = c(4, 3, 3),
  itemIDs = items_mini$item)
```

## Code: Solver Call

Solver Call

```{r}
solver_out <- useSolver(
	list(Btime, Blength, Bcat),
	solver = "GLPK"
)
```

## Code: Inspect Solution

Zusammengestellten Block inspizieren

```{r}
inspectSolution(
	solver_out, 
	items = items_mini, 
	idCol = "item"
)
```

## Code: Append Solution

Blockbesetzung zu Itempool hinzufügen

```{r}
item_mini_out <- appendSolution(
	solver_out, 
	items = items_mini, 
	idCol = "item"
)
item_mini_out[1:10, ]
```



## Praktische Tipps {.smaller}

-   ATA ist ein Skill für sich
-   Der nicht häufig gebraucht wird!
-   Es gibt immer mehrere Wege zum Ziel
-   Pragmatisches Vorgehen:
    -   Häufig muss die Lösung nicht perfekt sein
    -   Der Weg zum Ziel ist irrelevant
-   Schrittweises Vorgehen [@Proietti.2020]
    -   Problem schrittweise aufbauen oder
    -   Problem schrittweise vereinfachen

## References

::: {#refs}
:::

# Danke für Ihre Aufmerksamkeit!

# Appendix

## Block vs. Testform {.smaller}

**Anforderungen Blockbesetzung**

-   Parallelität (inhaltlich, Formate, ...)

**Anforderungen Testformen**

-   Parallelität
-   Linking

## Händische Blockbesetzung {.smaller}

**Häufig händisch (via Excel), aber:**

-   viele Items
-   viele Constraints\
    → z.B. viele Unverträglichkeiten
-   hoher Aufwand/kognitiver Load!


# Überblick Funktionalität

## Itempool vorbereiten {.smaller}

-   [`calculateIIF()`](https://beckerbenj.github.io/eatATA/reference/calculateIIF.html) - Berechnung Item-Informationsfunktion
-   [`calculatExpectedRT()`](https://beckerbenj.github.io/eatATA/reference/calculateIIF.html) - Berechnung erwarteter Antwortzeiten
-   [`dummiesToFactor()`](https://beckerbenj.github.io/eatATA/reference/dummiesToFactor.html) - Transformation von Dummy-Variablen in Faktoren
-   [`computeTargetValues()`](https://beckerbenj.github.io/eatATA/reference/computeTargetValues.html) - Berechnung von sinnvollen Zielwerten

## Objective Function {.smaller}

-   [`maxObjective()`](https://beckerbenj.github.io/eatATA/reference/maxObjective.html) - Maximieren
-   [`minObjective()`](https://beckerbenj.github.io/eatATA/reference/minObjective.html) - Minimieren
-   [`maximinObjective()`](https://beckerbenj.github.io/eatATA/reference/maximinObjective.html) - Maximieren eines Minimums
-   [`minimaxObjective()`](https://beckerbenj.github.io/eatATA/reference/minimaxObjective.html) - Minimieren eines Maximums
-   [`cappedMaximinObjective()`](https://beckerbenj.github.io/eatATA/reference/cappedMaximinObjective.html) - Capped Maximin

## Constraints {.smaller}

Itemverwendung

-   [`depletePoolConstraint()`](https://beckerbenj.github.io/eatATA/reference/depletePoolConstraint.html) - Erschöpfung des Itempools
-   [`itemUsageConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemUsageConstraint.html) - Itemnutzung

Anzahl Items pro Form

-   [`itemsPerFormConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemsPerFormConstraint.html) - Anzahl Items pro Form

## Constraints {.smaller}

Kategoriale Constraints

-   [`itemCategoryConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemCategoryConstraint.html) - Kategoriale Constraints
-   [`itemCategoryDeviationConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemCategoryDeviationConstraint.html) - Abweichung von Zielwert
-   [`itemCategoryMaxConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemCategoryMaxConstraint.html) - Maximum
-   [`itemCategoryMinConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemCategoryMinConstraint.html) - Minimum
-   [`itemCategoryRangeConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemCategoryRangeConstraint.html) - Maximum und Minimum

## Constraints {.smaller}

Metrische Constraints

-   [`autoItemValuesMinMaxConstraint()`](https://beckerbenj.github.io/eatATA/reference/autoItemValuesMinMaxConstraint.html) - Automatische Min/Max-Berechnung
-   [`itemValuesConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemValuesConstraint.html) - Metrische Constraints
-   [`itemValuesDeviationConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemValuesDeviationConstraint.html) - Abweichung von Zielwert
-   [`itemValuesMaxConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemValuesMaxConstraint.html) - Maximum
-   [`itemValuesMinConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemValuesMinConstraint.html) - Minimum
-   [`itemValuesRangeConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemValuesRangeConstraint.html) - Maximum und Minimum

## Constraints {.smaller}

Metrische Constraints über Testformen

-   [`acrossFormsConstraint()`](https://beckerbenj.github.io/eatATA/reference/acrossFormsConstraint.html) - Über Testformen

Iteminklusionen und -exklusionen

-   [`itemExclusionConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemExclusionConstraint.html) - Itemexklusionen
-   [`itemInclusionConstraint()`](https://beckerbenj.github.io/eatATA/reference/itemInclusionConstraint.html) - Iteminklusionen

Vorbereitung von Iteminklusionen und -exklusionen

-   [`itemTuples()`](https://beckerbenj.github.io/eatATA/reference/itemTuples.html) - Vorbereitung von Iteminklusionen und -exklusionen
-   [`matrixExclusionTuples()`](https://beckerbenj.github.io/eatATA/reference/matrixExclusionTuples.html) - Vorbereitung von Itemexklusionen
-   [`stemInclusionTuples()`](https://beckerbenj.github.io/eatATA/reference/stemInclusionTuples.html) - Vorbereitung von Iteminklusionen


## Item Inclusions

Gründe

-   Gemeinsamer Stimulus ('Aufgabe')
-   andere Gründe

Umsetzung

-   Aufgaben und nicht Items als Assembling Unit (e.g., VERA 3 Math)
-   explizite Item Inclusion (siehe eatATA Tutorial)

## Item Exclusions

Gründe

-   Item beinhaltet Info zu Lösung eines anderen Items
-   Items inhaltlich zu ähnlich
-   ...

Umsetzung

-   Explizite Item Exclusions

## Code: Item Inclusions (Input)

Input: Spalte mit Gruppierung

```{r}
incluTup <- stemInclusionTuples(
	items_lsa, 
	idCol = "item", 
	stemCol = "testlet"
)
```

Output: Inclusion Tuples

## Code: Item Inclusions (Constraints)

Erstellung von Inclusion Constraints

```{r}
incluCons <- itemInclusionConstraint(
	nForms = 8,  
	itemTuples = incluTup,
	itemIDs = items_lsa$item
)
```

## Code: Item Exclusions (Input)

Input: Spalte mit Exclusion-Listung

```{r}
exclusionTuples <- itemTuples(
	items_pilot, 
	idCol = "item",
	infoCol = "exclusions", 
	sepPattern = ", "
)
```

Output: Exclusion Tuples

## Code: Item Exclusions (Constraints)

Erstellung von Exclusion COnstraints

```{r}
#| eval: false

excl_constraints <- itemExclusionConstraint(
	nForms = nForms,
	itemTuples = exclusionTuples, 
	itemIDs = items_pilot$item
)
```

## Übung {.smaller}

Notiert die Decision Variables, Objective Function und Constraints für folgendes ATA-Problem:

-   2 Blöcke
-   beide Blöcke bzgl. Testzeit so nah wie möglich an 450 Sekunden
-   jedes Item darf maximal nur in einem Block vorkommen
-   pro Block müssen alle 3 Itemformate mindestens 3 mal verwendet werden

## Lösung {.smaller}

-   Decision Variables für 2 Blöcke und Item-Pool aus 30 Items

$$
    i_{1, b1}, i_{2, b1}, i_{3, b1}, \ldots, i_{30, b1}
$$ $$
    i_{1, b2}, i_{2, b2}, i_{3, b2}, \ldots, i_{30, b2}
$$

## Lösung {.smaller}

-   beide Blöcke bzgl. Testzeit so nah wie möglich an 450 Sekunden
-   Maximin-Ansatz

$$
  27.79i_{1, b1} + 15.45i_{2, b1} + \ldots + 19.50i_{30, b1} - y <= 450
$$ $$
  27.79i_{1, b1} + 15.45i_{2, b1} + \ldots + 19.50i_{30, b1} + y >= 450
$$ $$
  27.79i_{1, b2} + 15.45i_{2, b2} + \ldots + 19.50i_{30, b2} - y <= 450
$$ $$
  27.79i_{1, b2} + 15.45i_{2, b2} + \ldots + 19.50i_{30, b2} + y >= 450
$$ $$
 minimiere \quad y
$$

## Lösung {.smaller}

-   jedes Item darf maximal nur in einem Block vorkommen

$$
    i_{1, b1} + i_{1, b2} <= 1 
$$ $$
    i_{2, b1} + i_{2, b2} <= 1 
$$ $$
    \ldots 
$$

## Lösung {.smaller}

-   jedes Itemformat sollte mindestens 3 Mal pro Block vorkommen

$$
    1i_{1, b1} + 1i_{2, b1} + \ldots + 0i_{30, b1} >= 3 
$$ $$
    1i_{1, b2} + 1i_{2, b2} + \ldots + 0i_{30, b2} >= 3 
$$ $$
    \ldots
$$

