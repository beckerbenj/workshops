---
title: "eatGADS - Datenbanknutzung"
author: "Benjamin Becker"
title-slide-attributes:
  data-background-image: Figures/eatGADS.png
  data-background-size: 20%
  data-background-repeat: no-repeat
  data-background-position: 95% 5%
bibliography: references_dissertation.bib
csl: apa.csl
format: 
  revealjs:
    logo: Figures/eatGADS.png
    footer: "Datenbanknutzung"
    toc: false
    theme: default
    css: logo.css
editor: source
execute:
  echo: true
---

------------------------------------------------------------------------

## Agenda {.smaller}

-   Hintergrund
-   Grundlegendes
-   Übersicht Funktionalität
-   Anwendungsbeispiele

```{r}
#| eval: true
#| echo: false
#| 
library(eatGADS)
```

# Hintergrund

## eatGADS - Scope

-   Datenbankerstellung
-   Datenbanknutzung
-   (teil-automatisierte) Datenaufbereitung

## eatGADS - Scope

-   Datenbankerstellung
-   **Datenbanknutzung**
-   (teil-automatisierte) Datenaufbereitung

## Was ist ein GADS?

**G**enereller **A**nalyse-**D**atensatz

- Berichts-GADS
- nach-Berichts-GADS
- FDZ-GADS

## Wie war es früher?

Datei-Format

- .Rdata
- .sav

Daten-Format

- long
- wide

## GADS-Ordner

![](Figures/GADS_folder.png)


## Warum ist es jetzt besser?

- .db (SQLite3) benötigt weniger Speicherplatz
- Zugriff auf Metadaten ohne Daten laden zu müssen
- Daten müssen für Analysen nicht gereshaped werden
- Variablenselektion beim Laden der Daten (weniger Arbeitsspeicher-Überlastung)
- flexibels Anwenden von Wertelabeln und Missingtags


## eatGADS

![](Figures/eatGADS_CRAN.jpg)

```{r}
#| eval: false
#| echo: true

# Stabile Version
install.packages("eatGADS")

# Development Version
remotes::install_github("beckerbenj/eatGADS")
```

## Ressourcen

-   [Vignette: getGADS: Using a relational eatGADS data base](https://beckerbenj.github.io/eatGADS/articles/getGADS.html)

# Grundlegendes

## Daten in Datenbank

-   numerische Variablen
-   character Variablen (Zeichenfolgen)

![](Figures/GADSdat_dat.jpg){height="50%"}

## Meta-Daten in Datenbank

-   Meta-Daten (`labels`)
    -   `varName` - Variablenname
    -   `varLabel` - Variablenlabel
    -   `format` - SPSS-Format
    -   `value` - numerischer Wert
    -   `valLabel` - Wertelabel
    -   `missings` - Missingtags (`miss` oder `valid`)

## Meta-Daten in Datenbank

![](Figures/GADSdat_labels.jpg){height="50%"}
    
# Übersicht Funktionalität

## Datenbank-Struktur

Datenbankstruktur und Variablennamen inspizieren

```{r}
db_path <- system.file("extdata", "pisa.db", package = "eatGADS")
nam <- namesGADS(db_path)
nam

```

## Metadaten

Metadaten extrahieren

```{r}
extractMeta(GADSobject = db_path, vars = c("repeated", "norms_f", "computer_age"))
```

## Metadaten

Metadaten extrahieren

```{r}
all_meta <- extractMeta(db_path)
str(all_meta)
grep("grade", value = TRUE, all_meta$varLabel)
all_meta[grep("grade", all_meta$varLabel), ]
```


## GADSdat

GADSdat aus Datenbank ziehen

```{r}
# getGADS_fast legt temporaere lokale Kopie an, die nach Beendigung der R-Session automatisch geloescht wird
# hier nicht notwendig, da Datenbank eh lokal vorliegt (und klein ist)
pisa_gads <- getGADS(db_path, vSelect = c("schtype", "sameteach"))
```

## GADSdat

GADSdat aus Datenbank ziehen

```{r}
# resultierendes "GADSdat"-Objekt
str(pisa_gads)

```


## Daten

Daten extrahieren

```{r}
### d) Daten für Analysen extrahieren
pisa_dat <- extractData2(pisa_gads, labels2character = "sameteach")
str(pisa_dat)

### e) Analysen (mit eatRep etc.)
table(pisa_dat$sameteach)
table(pisa_dat$schtype)

```

## Daten

Daten extrahieren

```{r}
### f) Kompetenzdaten extrahieren (Long-Format)
pisa_gads2 <- getGADS(db_path, vSelect = c("schtype", "sameteach", nam$PVs))
str(pisa_gads2)
pisa_dat2 <- extractData2(pisa_gads2, labels2character = c("sameteach", "dimension"))
str(pisa_dat2)
View(pisa_dat2)
table(pisa_dat2$dimension)
table(pisa_dat2$imp)

```


# Anwendungsbeispiele/Übung
